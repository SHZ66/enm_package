import pytest
from src.enm import Enm
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

@pytest.fixture
def enm():
    """ Returns empty Enm object with name Empty"""
    return Enm('Empty')

def test_enm_foo(enm):
    assert enm.foo() == 'foo'

# def test_read_network(enm):
#     fname, path = enm.read_network('this/random/file/path.csv')

#     assert fname == 'this/random/file/path'
#     assert path =='.csv'


from unittest.mock import Mock
#from .. import my_module
def test_gnm(enm):
    L = np.array([[ 5,  0,  0,  0,  0, -1, -1, -1, -1, -1],
        [ 0,  5,  0,  0,  0, -1, -1, -1, -1, -1],
        [ 0,  0,  3,  0,  0, -1, -1,  0,  0, -1],
        [ 0,  0,  0,  1,  0, -1,  0,  0,  0,  0],
        [ 0,  0,  0,  0,  4, -1, -1, -1,  0, -1],
        [-1, -1, -1, -1, -1,  8, -1, -1, -1,  0],
        [-1, -1, -1,  0, -1, -1,  7, -1, -1,  0],
        [-1, -1,  0,  0, -1, -1, -1,  6, -1,  0],
        [-1, -1,  0,  0,  0, -1, -1, -1,  6, -1],
        [-1, -1, -1,  0, -1,  0,  0,  0, -1,  5]])
    enm.L=L
    enm.get_gnm()
    eigvals = enm.gnm.getEigvals()
    #eigvecs = enm.gnm.getEigvecs()

    np.testing.assert_array_almost_equal(eigvals,np.array([0.98062692, 2.93886417, 4.        , 5.        , 5.01742587,
       7.        , 7.38411109, 8.37647156, 9.30250039]))

def test_prs(enm):
    L = np.array([[ 5,  0,  0,  0,  0, -1, -1, -1, -1, -1],
        [ 0,  5,  0,  0,  0, -1, -1, -1, -1, -1],
        [ 0,  0,  3,  0,  0, -1, -1,  0,  0, -1],
        [ 0,  0,  0,  1,  0, -1,  0,  0,  0,  0],
        [ 0,  0,  0,  0,  4, -1, -1, -1,  0, -1],
        [-1, -1, -1, -1, -1,  8, -1, -1, -1,  0],
        [-1, -1, -1,  0, -1, -1,  7, -1, -1,  0],
        [-1, -1,  0,  0, -1, -1, -1,  6, -1,  0],
        [-1, -1,  0,  0,  0, -1, -1, -1,  6, -1],
        [-1, -1, -1,  0, -1,  0,  0,  0, -1,  5]])
    enm.L=L
    enm.get_gnm()
    enm.get_prs()
    prs_mat_got = enm.prs_mat
    prs_mat_expected = np.array([[0.00000000e+00, 1.00143605e-02, 3.90208376e-02, 3.75411396e-01,
        1.94212248e-02, 3.92782451e-03, 3.69922763e-05, 1.23696857e-03,
        3.25827872e-03, 1.96429686e-04],
       [1.00143605e-02, 0.00000000e+00, 3.90208376e-02, 3.75411396e-01,
        1.94212248e-02, 3.92782451e-03, 3.69922763e-05, 1.23696857e-03,
        3.25827872e-03, 1.96429686e-04],
       [1.43630592e-02, 1.43630592e-02, 0.00000000e+00, 1.40579881e-01,
        1.43630592e-02, 1.70009031e-03, 2.31658508e-07, 2.02513037e-02,
        1.43630592e-02, 1.39738986e-03],
       [1.52005688e-02, 1.52005688e-02, 1.54641195e-02, 0.00000000e+00,
        1.52005688e-02, 1.50887580e-05, 1.45516022e-02, 1.44235077e-02,
        1.52005688e-02, 2.12108155e-02],
       [1.27183177e-02, 1.27183177e-02, 2.55534558e-02, 2.45844505e-01,
        0.00000000e+00, 2.57220235e-03, 2.42250181e-05, 8.10049801e-04,
        1.27183177e-02, 1.28635304e-04],
       [1.21173773e-02, 1.21173773e-02, 1.42487966e-02, 1.14962887e-03,
        1.21173773e-02, 0.00000000e+00, 7.54388663e-03, 6.75862691e-03,
        1.21173773e-02, 9.31199383e-02],
       [7.40385244e-05, 7.40385244e-05, 1.25963463e-06, 7.19291822e-01,
        7.40385244e-05, 4.89424038e-03, 0.00000000e+00, 9.64180330e-04,
        7.40385244e-05, 2.20588616e-02],
       [1.73502383e-03, 1.73502383e-03, 7.71701603e-02, 4.99649297e-01,
        1.73502383e-03, 3.07290190e-03, 6.75706891e-04, 0.00000000e+00,
        1.73502383e-03, 2.32626981e-02],
       [4.58659989e-03, 4.58659989e-03, 5.49286862e-02, 5.28457511e-01,
        2.73387868e-02, 5.52910325e-03, 5.20731296e-05, 1.74125064e-03,
        0.00000000e+00, 2.76509303e-04],
       [1.91193930e-04, 1.91193930e-04, 3.69516813e-03, 5.09884672e-01,
        1.91193930e-04, 2.93800886e-02, 1.07276198e-02, 1.61428527e-02,
        1.91193930e-04, 0.00000000e+00]])
    np.testing.assert_array_almost_equal(prs_mat_expected,prs_mat_got,err_msg='PRS matrix is wrong')


def test_create_df(enm):
    adj = np.array([[0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 1, 1, 0, 1, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
        [0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
        [1, 1, 1, 1, 1, 0, 1, 0, 1, 1],
        [1, 1, 1, 1, 0, 1, 0, 1, 1, 0],
        [1, 0, 1, 1, 1, 0, 1, 0, 0, 1],
        [1, 1, 0, 1, 0, 1, 1, 0, 0, 1],
        [1, 0, 0, 1, 0, 1, 0, 1, 1, 0]])
    enm.G = nx.from_numpy_array(adj)
    enm.giant_component()
    enm.get_gnm()
    enm.get_prs()
    enm.create_df()
    got = enm.df.values
    asked = np.array([[ 0.00000000e+00,  5.00000000e+00, -3.00439526e-01,
        -3.50299585e-01, -2.50232316e-01,  2.91984798e-01,
         1.44185983e-02, -1.63749611e-01,  1.70817323e-02,
         1.08817925e-01,  2.37445574e-01,  8.62368443e-02,
         3.42592593e-02,  7.00000000e-01,  3.31824935e-01,
         6.92307692e-01],
       [ 1.00000000e+00,  3.00000000e+00,  5.75528249e-01,
        -1.06662184e-01, -1.43216122e-01, -1.43721160e-01,
         2.49321863e-01, -9.27055059e-02, -5.94319092e-01,
         3.03731624e-01,  1.97284398e-01,  3.97004608e-01,
         0.00000000e+00,  1.00000000e+00,  2.16098517e-01,
         6.00000000e-01],
       [ 2.00000000e+00,  3.00000000e+00,  5.13481813e-01,
        -6.01894835e-02, -1.63135314e-01, -1.56011978e-01,
        -1.51384983e-01, -1.40890561e-01,  7.32991573e-01,
         4.14315814e-02,  1.60112996e-01,  3.44530753e-01,
         9.25925926e-03,  6.66666667e-01,  2.06268776e-01,
         6.00000000e-01],
       [ 3.00000000e+00,  5.00000000e+00, -3.00439526e-01,
        -3.50299585e-01, -2.50232316e-01,  2.91984798e-01,
         1.44185983e-02, -1.63749611e-01,  1.70817323e-02,
         1.08817925e-01,  2.37445574e-01,  8.62368443e-02,
         3.42592593e-02,  7.00000000e-01,  3.31824935e-01,
         6.92307692e-01],
       [ 4.00000000e+00,  2.00000000e+00,  9.37566650e-02,
        -2.49199045e-02, -8.59813468e-03, -1.75937160e-02,
        -1.09487693e-01, -1.55755864e-01, -2.11514880e-01,
        -8.99566135e-01,  1.45043367e-01,  9.23394081e-01,
         9.25925926e-03,  0.00000000e+00,  1.33700442e-01,
         5.62500000e-01],
       [ 5.00000000e+00,  8.00000000e+00,  2.01919162e-02,
        -3.05473394e-01,  2.08068692e-01, -3.29921961e-02,
        -2.55247345e-01,  8.34072348e-01, -2.95577141e-02,
         1.39885517e-02,  1.41958747e-01,  5.58032686e-02,
         4.57407407e-01,  3.92857143e-01,  4.20252961e-01,
         9.00000000e-01],
       [ 6.00000000e+00,  7.00000000e+00,  6.72250050e-02,
         1.35466749e-01,  8.04055512e-01,  3.85647419e-01,
         2.45373300e-02, -2.50562712e-01,  3.81605782e-02,
         1.30615378e-01,  3.19238465e-01,  6.19741807e-02,
         2.19444444e-01,  5.23809524e-01,  3.98476052e-01,
         8.18181818e-01],
       [ 7.00000000e+00,  6.00000000e+00, -1.19875126e-01,
         4.43715323e-01, -1.54256159e-01,  1.01840059e-01,
         7.14974655e-01,  3.15051952e-01,  1.85159715e-01,
        -9.92456379e-02,  2.80654775e-01,  1.83590400e-01,
         2.25925926e-01,  3.33333333e-01,  3.13902297e-01,
         7.50000000e-01],
       [ 8.00000000e+00,  6.00000000e+00, -1.23797205e-01,
         6.55047612e-01, -2.59003797e-01,  6.60343555e-02,
        -5.66844405e-01,  7.74080623e-03, -1.65708081e-01,
         1.87914097e-01,  4.02567377e-01,  1.24197336e-01,
         8.70370370e-02,  6.66666667e-01,  3.67877854e-01,
         7.50000000e-01],
       [ 9.00000000e+00,  5.00000000e+00, -4.25632264e-01,
        -3.63855480e-02,  2.16549955e-01, -7.87172380e-01,
         6.52933815e-02, -1.89451241e-01,  1.06244348e-02,
         1.03494690e-01,  2.72874636e-01,  1.31657591e-01,
         3.42592593e-02,  7.00000000e-01,  3.21556772e-01,
         6.92307692e-01]])
    #assert got.shape==asked.shape
    np.testing.assert_array_almost_equal(np.abs(got),np.abs(asked))


# def test_plot_network_spring(enm):
#     adj = np.array([[0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
#         [0, 0, 0, 0, 0, 1, 1, 0, 1, 0],
#         [0, 0, 0, 0, 0, 1, 1, 1, 0, 0],
#         [0, 0, 0, 0, 0, 1, 1, 1, 1, 1],
#         [0, 0, 0, 0, 0, 1, 0, 1, 0, 0],
#         [1, 1, 1, 1, 1, 0, 1, 0, 1, 1],
#         [1, 1, 1, 1, 0, 1, 0, 1, 1, 0],
#         [1, 0, 1, 1, 1, 0, 1, 0, 0, 1],
#         [1, 1, 0, 1, 0, 1, 1, 0, 0, 1],
#         [1, 0, 0, 1, 0, 1, 0, 1, 1, 0]])
#     enm.G = nx.from_numpy_array(adj)
#     enm.giant_component()
#     plot_network_spring



def is_dataframe_big(dataframe):

    # Lets check if this dataframe has over a million rows
    if dataframe.shape[0] > 1000000:
        return True
    else:
        return False

def test_big():
    dataframe = Mock()
    dataframe.shape = (2000000, 1)

    assert is_dataframe_big(dataframe) is True


def test_not_big():
    dataframe = Mock()
    dataframe.shape = (100, 1)

    assert is_dataframe_big(dataframe) is False